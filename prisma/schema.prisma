
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default("unknown")
  name          String    @unique
  displayname   String
  email         String    @unique
  emailVerified Boolean
  avatar        String?
  rank          Rank      @default(USER)
  badges        String[]  @default([])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  Guild         Guild[]
  Member        Member[]

  @@map("user")
}

enum Rank {
  USER
  STAFF
}

model Member {
  id       String    @id @default("unknown")
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  guildId  String
  guild    Guild     @relation(fields: [guildId], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([userId, guildId])
}

model Guild {
  id        String    @id @default("unknown")
  name      String
  icon      String?
  channels  Channel[]
  members   Member[]
  ownerId   String
  owner     User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
}

model Channel {
  id        String    @id @default("unknown")
  name      String
  guildId   String
  guild     Guild     @relation(fields: [guildId], references: [id], onDelete: Cascade)
  messages  Message[]
  createdAt DateTime  @default(now())
}

model Message {
  id        String   @id @default("unknown")
  channelId String
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  authorId  String
  author    Member   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now())
}

model Session {
  id        String   @id @default("unknown")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default("unknown")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default("unknown")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}